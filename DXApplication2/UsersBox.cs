using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Data.Entity;
using DataHandler;

namespace DXApplication2
{
    public partial class UsersBox : DevExpress.XtraEditors.XtraUserControl
    {
        bool init = true;
        bool IsEdit = false;
        bool IsNew = false;
        Users newuser = new Users();
        Users SelectedUser = new Users();
        UserOptions useroptions = new UserOptions();
        PermissionsOptions permissionsoptions = new PermissionsOptions();
        CompaniesOptions companiesoptions = new CompaniesOptions();
        DataHandler.ContabilidadEntities dbContext = new DataHandler.ContabilidadEntities();
      
       ContabilidadEntities usercont = new ContabilidadEntities();
        List<UserCompanies> usercomplist = new List<UserCompanies>();
        List<UserCompanies> usercomplistold = new List<UserCompanies>();
        List<Users> userlist = new List<Users>();
        Permisions[] userpermissions;
        int usertypeID = 2;

        public UsersBox()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            //DataHandler.ContabilidadEntities dbContext = new DataHandler.ContabilidadEntities();
            //// Call the Load method to get the data for the given DbSet from the database.
            //dbContext.UserCompanies.Load();
            //// This line of code is generated by Data Source Configuration Wizard
            //userCompaniesBindingSource1.DataSource = dbContext.UserCompanies.Local.ToBindingList();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            DataHandler.ContabilidadEntities dbContext = new DataHandler.ContabilidadEntities();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.UserCompanies.Load();
            // This line of code is generated by Data Source Configuration Wizard
           // userCompaniesBindingSource2.DataSource = dbContext.UserCompanies.Local.ToBindingList();
        }

        public UsersBox(Users LoggedUser)
        {
            InitializeComponent();
            // InitTextboxes();
            FillPermissions();
            //IsEdit = true;
            SetReadOnly(true);
            //LoggedUserText.Text = LoggedUser.Name;
            //LoggeduserDDMenu.Text = LoggedUser.Name;

            newuser.Permisions = null;

            if (PasswordEdit.Text == CfPasswordEdit.Text)
            {
                if (!IsEdit & (PasswordEdit.Text != string.Empty))
                {
                    newuser.Password = useroptions.GenerateHash(CfPasswordEdit.Text, CfPasswordEdit.Text.Length);
                }

                Users clone = new Users();

                //clone.CompanyId = newuser.CompanyId;

                clone.Email = newuser.Email;
                clone.LastName = newuser.LastName;
                clone.Login = newuser.Login;
                clone.Name = newuser.Name;
                clone.Notes = newuser.Notes;
                clone.Password = newuser.Password;
                clone.UserTypeID = usertypeID;
                // clone.PermissionsID = newuser.PermissionsID;

                clone.UserID = newuser.UserID;
                // var companieschecked = CompaniesList.CheckedItems;
                var companyList = companiesoptions.GetCompanies();
                //  var compa = companieschecked.Cast<CompaniesSet>().ToArray();

                for (int i = 0; i < companyList.Length; i++)
                {

                    UserCompanies usercomp = new UserCompanies() { CompaniID = companyList[i].CompanyId, UserID = clone.UserID, CompaniesSet = companyList[i] };
                    usercomplist.Add(usercomp);

                    // usercont.UserCompanies.Add(usercomp);

                    //companieschecked.
                }
                usercomplistold = usercomplist;
                userlist = useroptions.GetActiveUsers().ToList();
                if (userlist.Count == 0)
                {
                    layoutControl1.Hide();
                    layoutControl2.Hide();


                }

                gridControl2.DataSource = usercomplist;
                gridControl1.DataSource = userlist;
                gridView2.RefreshData();
                gridView1.RefreshData();


                //DataHandler.ContabilidadEntities dbContext = new DataHandler.ContabilidadEntities();
                //// Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
                //dbContext.PermissionsTypes.LoadAsync().ContinueWith(loadTask =>
                //{
                //// Bind data to control when loading complete
                //permissionsTypesBindingSource2.DataSource = dbContext.PermissionsTypes.Local.ToBindingList();
                //}, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());

                init = false;
            }
        }
        private void groupControl1_Paint(object sender, PaintEventArgs e)
        {

        }


        private void InitTextboxes()
        {
            NameEdit.DataBindings.Add("EditValue", SelectedUser, "Name");
            LNameEdit.DataBindings.Add("EditValue", SelectedUser, "LastName");
            NotesEdit.DataBindings.Add("EditValue", SelectedUser, "Notes");
            EmailEdit.DataBindings.Add("EditValue", SelectedUser, "Email");
            LoginEdit.DataBindings.Add("EditValue", SelectedUser, "Login");
        }

        private void FillPermissions()
        {
            PermissionsOptions permissiontypes = new PermissionsOptions();
           
         PermissionsTree.DataSource = permissiontypes.GetPermissionsTypesAcces(false);
            UserAlowTree.DataSource = permissiontypes.GetPermissionsTypesAcces(true);
            PermissionsTree.KeyFieldName = "PermissionsTypesID";
            PermissionsTree.ParentFieldName = "IsUserID";
            //PermissionsTree.da
         int aas =    PermissionsTree.Nodes.Count;
            //PermissionsTypes [] perlist = permissiontypes.GetPermissionsTypesAcces(true);
            //for (int i = 0; i < perlist.Length; i++)
            //{
            //    DevExpress.XtraTreeList.Nodes.TreeListNode dfd;
              
            //    PermissionsTree.AppendNode(perlist[i], PermissionsTree.Nodes[0]);
               

               

            //}



            //   PermissionsTree.Nodes[0].Nodes.Add(permissiontypes.GetPermissionsTypesAcces(false));

        }

        private void simpleButton4_Click(object sender, EventArgs e)
        {
            IsNew = true;
            SetReadOnly(false);
            newuser = new Users();
            
                layoutControl1.Show();
                layoutControl2.Show();
                layoutControl2.Show();

           
            SetSelectedUser(newuser, false);
          
        }

     
        private void CashCBtn_CheckedChanged(object sender, EventArgs e)
        {
            if ((IsEdit || IsNew)||init)
                if (CashCBtn.Checked)
            {
                SelectedUser.UserTypeID = 2;
                AdminCBtn.Checked = false;
                SaleCBtn.Checked = false;
                this.CashCBtn.ImageOptions.Image = global::DXApplication2.Properties.Resources._2botonactivo;
                this.AdminCBtn.ImageOptions.Image = global::DXApplication2.Properties.Resources._1erbotoninactivo;
                this.SaleCBtn.ImageOptions.Image = global::DXApplication2.Properties.Resources._3erbotoninactivo;



            }
            else
            {
                this.CashCBtn.ImageOptions.Image = global::DXApplication2.Properties.Resources._2botoninactivo;
            }      
        }

        private void AdminCBtn_CheckedChanged(object sender, EventArgs e)
        {
            if ((IsEdit || IsNew) ||init)
                if (AdminCBtn.Checked)
            {
                SelectedUser.UserTypeID  = 1;
                CashCBtn.Checked = false;
                SaleCBtn.Checked = false;
                this.AdminCBtn.ImageOptions.Image = global::DXApplication2.Properties.Resources._1erbotonactivo;

                this.CashCBtn.ImageOptions.Image = global::DXApplication2.Properties.Resources._2botoninactivo;
                 this.SaleCBtn.ImageOptions.Image = global::DXApplication2.Properties.Resources._3erbotoninactivo;


            }
            else
            {
              this.AdminCBtn.ImageOptions.Image = global::DXApplication2.Properties.Resources._1erbotoninactivo;
            }
           
        }

        private void SaleCBtn_CheckedChanged(object sender, EventArgs e)
        {
            if ((IsEdit || IsNew) || init)
                if (SaleCBtn.Checked)
            {
              SelectedUser.UserTypeID = 3;
                CashCBtn.Checked = false;
                AdminCBtn.Checked = false;
                this.CashCBtn.ImageOptions.Image = global::DXApplication2.Properties.Resources._2botoninactivo;
                this.AdminCBtn.ImageOptions.Image = global::DXApplication2.Properties.Resources._1erbotoninactivo;
                this.SaleCBtn.ImageOptions.Image = global::DXApplication2.Properties.Resources._3erbotonactivo;


            }
            else
            {
 this.SaleCBtn.ImageOptions.Image = global::DXApplication2.Properties.Resources._3erbotoninactivo;
            }
        }

        private Users SetSelectedUser(Users selected, bool IsEdit )
        {
            init = true;
          //  usercont = new ContabilidadEntities();
            //gridView1.GetDataRow(rowhandle).ItemArray

            //  AddUser newuser = new DXApplication2.AddUser(SelectedUser);
            //  newuser.FormClosed += Newuser_FormClosed;
            //  newuser.Show();
            //  newuser = SelectedUser;
            if (!IsEdit)
            {
                NameEdit.Text = string.Empty ;
                NotesEdit.Text = string.Empty;
                EmailEdit.Text = string.Empty;
                LoginEdit.Text = string.Empty;
                LNameEdit.Text = string.Empty;
usercomplist = usercomplistold;
            }
            else
            {
                NameEdit.Text = selected.Name;
                LNameEdit.Text = selected.LastName; ;
                NotesEdit.Text = selected.Notes;
                EmailEdit.Text = selected.Email;
                LoginEdit.Text = selected.Login;
                usercomplist.Clear();
                usercomplist.AddRange(useroptions.getUserCompList(selected.UserID));
            }
            
                switch (selected.UserTypeID)
                {
                    case 1:

                        AdminCBtn.Checked = true;
               
                    break;
                    case 3:

                        SaleCBtn.Checked = true;
                  
                    break;
                    case 2:

                        CashCBtn.Checked = true;
                        break;
                    default:
                        break;
                }

                
                gridView2.RefreshData();
                PermissionsTree.UncheckAll();
                UserAlowTree.UncheckAll();
                var userpermissions = permissionsoptions.GetPermissions(selected.UserID);

                for (int i = 0; i < userpermissions.Length; i++)
                {

                    var selectednode = PermissionsTree.FindNodeByKeyID(userpermissions[i].PermissionsTypeID);
                    if (selectednode != null)
                        selectednode.Checked = true;

                    selectednode = UserAlowTree.FindNodeByKeyID(userpermissions[i].PermissionsTypeID);
                    if (selectednode != null)
                        selectednode.Checked = true;


                }
            //gridControl2.Refresh();
            // gridControl2.DataSource = usercomplist;
            init = false;
            return selected;


            
        }
        private void gridView1_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            if (IsNew || IsEdit)
            {
                DialogResult dialogResult = MessageBox.Show("Save changes", "Changes not saved", MessageBoxButtons.YesNo);
                if (dialogResult == DialogResult.Yes)
                {
                    simpleButton1_Click( sender,  e);
                }
                else if (dialogResult == DialogResult.No)
                {
                    IsNew = false;
                    IsEdit = false;
                    SetReadOnly(true);
                }
            }
            if (gridView1.GetFocusedRowCellValue("UserID") != null)
            {

               
             SelectedUser = SetSelectedUser(useroptions.GetUserby_ID(int.Parse(gridView1.GetFocusedRowCellValue("UserID").ToString())),true);
                SetReadOnly(true);
            }

        }

      

       

        private void gridView2_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
          var  SelectedUserComp = ((UserCompanies)e.Row);
            usercomplist.First(item => item.UserCompanyID == SelectedUserComp.UserCompanyID).Active = SelectedUserComp.Active;
          
        }

        private void simpleButton5_Click(object sender, EventArgs e)
        {
            IsEdit = true;
            SetReadOnly(false);
            // simpleButton4_Click(sender, e);
        }

        

        private void PasswordEdit_Enter(object sender, EventArgs e)
        {
            PasswordEdit.EditValue = string.Empty;
        }

        private void PermissionsTree_StateChanged(object sender, EventArgs e)
        {
            
        }

        private void PermissionsTree_AfterCheckNode(object sender, DevExpress.XtraTreeList.NodeEventArgs e)
        {
            var permtype = (PermissionsTypes)PermissionsTree.GetDataRecordByNode(e.Node);
            AfterCheckNode(e, permtype);



        }

        private void AfterCheckNode(DevExpress.XtraTreeList.NodeEventArgs e, PermissionsTypes permtype)
        {
            if (e.Node.Checked)
            {
                Permisions newper = new Permisions() { UserID = SelectedUser.UserID, PermissionsTypeID = permtype.PermissionsTypesID };
                usercont.Permisions.Add(newper);
            }
            else
            {
                try
                {
                 Permisions perm = usercont.Permisions.Local.Single(u => (u.UserID == SelectedUser.UserID)&(u.PermissionsTypeID == permtype.PermissionsTypesID)); usercont.Permisions.Remove(perm);
                }
                catch (Exception)
                {

                    Permisions perm = usercont.Permisions.Single(u => (u.UserID == SelectedUser.UserID) & (u.PermissionsTypeID == permtype.PermissionsTypesID)); usercont.Permisions.Remove(perm);
                }
                
               
            }
        }
        private void UserAlowTree_AfterCheckNode(object sender, DevExpress.XtraTreeList.NodeEventArgs e)
        {

            var permtype = (PermissionsTypes)UserAlowTree.GetDataRecordByNode(e.Node);
            AfterCheckNode(e, permtype);

        }


     

        private bool Validatedata(string data )
        {

            if (String.IsNullOrWhiteSpace(data))
                return false;
            if ((usercont.Users.Any(item => item.Login ==LoginEdit.Text) == true)&!(LoginEdit.Text == SelectedUser.Login))

                return false;
            return true;


        }
        

        private void LoginEdit_EditValueChanging(object sender, DevExpress.XtraEditors.Controls.ChangingEventArgs e)
        {
            if (Validatedata(LoginEdit.Text))
            {
                LoginEdit.BackColor = Color.White;
                SelectedUser.Login = LoginEdit.Text;

            }
            else
            {
                LoginEdit.BackColor = Color.PeachPuff;
            }
        }

        private void SetBackColors(Color color)
        {
            LoginEdit.BackColor = color;
            NameEdit.BackColor = color;
            LNameEdit.BackColor = color;
            PasswordEdit.BackColor = color;
            CfPasswordEdit.BackColor = color;
            EmailEdit.BackColor = color;
            NotesEdit.BackColor = color;
            gridControl1.BackColor = color;
            gridControl2.BackColor = color;
        }
        private void SetReadOnly(bool set)
        {
            if (set)
            {
                layoutControl1.OptionsView.IsReadOnly = DevExpress.Utils.DefaultBoolean.True;
                layoutControl2.OptionsView.IsReadOnly = DevExpress.Utils.DefaultBoolean.True;
                NotesEdit.ReadOnly = true;
                gridView1.OptionsBehavior.Editable = false;
                gridView2.OptionsBehavior.Editable = false;
                tabPane1.Enabled = false;
                IsEdit = false;
                IsNew = false;
                LoginEdit.ReadOnly = true;
                //CashCBtn.Enabled = false;
                //SaleCBtn.Enabled = false;
                //AdminCBtn.Enabled = false;
                SetBackColors(Color.AliceBlue);
            }
            else
            {
                layoutControl1.OptionsView.IsReadOnly = DevExpress.Utils.DefaultBoolean.False;
                layoutControl2.OptionsView.IsReadOnly = DevExpress.Utils.DefaultBoolean.False;
                NotesEdit.ReadOnly = false;
                tabPane1.Enabled = true;
                gridView1.OptionsBehavior.Editable = true;
                gridView2.OptionsBehavior.Editable = true;
                SetBackColors(Color.White);
                //CashCBtn.Enabled = true;
                //SaleCBtn.Enabled = true;
                //AdminCBtn.Enabled = true;
            }


        }

      

   

        private void Validate_Leave(object sender, EventArgs e)
        {
            if (IsEdit || IsNew)
            {
                TextEdit dfg = sender as TextEdit;
                dfg.BackColor = Color.White;
                if (String.IsNullOrWhiteSpace(dfg.Text))
                    dfg.BackColor = Color.PeachPuff;
                switch (dfg.Name)
                {
                    case "LoginEdit":

                        if (Validatedata(LoginEdit.Text))
                        {
                            LoginEdit.BackColor = Color.White;
                            SelectedUser.Login = LoginEdit.Text;

                        }
                        else
                        {
                            LoginEdit.BackColor = Color.PeachPuff;
                        }
                        break;

                    case "NameEdit":
                        SelectedUser.Name = dfg.Text;

                        break;
                    case "LNameEdit":
                        SelectedUser.LastName = dfg.Text;

                        break;
                    case "EmailEdit":
                        SelectedUser.Email = dfg.Text;

                        break;
                    case "NotesEdit":
                        SelectedUser.Notes = dfg.Text;

                        break;
                }
            }
            
        }

        private void simpleButton6_Click(object sender, EventArgs e)
        {
            Users toup = usercont.Users.Single(u => u.UserID == SelectedUser.UserID);
            //usercont.Users.Remove(toup);
             SelectedUser.ActiveUser = false;
            usercont.Entry(toup).CurrentValues.SetValues(SelectedUser);
            usercont.SaveChanges();
            userlist.Clear();
            userlist.AddRange(useroptions.GetActiveUsers());

            gridView1.RefreshData();
            if (userlist.Count == 0)
            {
                layoutControl1.Hide();
                layoutControl2.Hide();
                

            }
            else
            {
                SetSelectedUser(userlist[userlist.Count-1], true);
            }
            SetReadOnly(true);

        }

       

        private void gridView1_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            if (gridView1.GetFocusedRowCellValue("UserID") != null)
            {


                SelectedUser = SetSelectedUser(useroptions.GetUserby_ID(int.Parse(gridView1.GetFocusedRowCellValue("UserID").ToString())),true);
            }
        }

        private void Commit_Changes()
        {
            try
            {
                UserCompanies vb = new UserCompanies();
                //newuser.PermissionsID = permissionsoptions.GetPermisionID(newuser.Permissions.Name);
                //  newuser.UserCompanies = companiesoptions.GetCompaniesID(newuser.UserCompanies);
                // newuser.CompaniesSet = null;
                newuser.Permisions = null;

                if ((PasswordEdit.Text == CfPasswordEdit.Text) & (IsNew || IsEdit))
                {
                    if ((PasswordEdit.Text != string.Empty) & IsNew)
                    {
                        newuser.Password = useroptions.GenerateHash(CfPasswordEdit.Text, CfPasswordEdit.Text.Length);
                    }

                    Users clone = new Users();

                    //clone.CompanyId = newuser.CompanyId;

                    clone.Email = SelectedUser.Email;
                    clone.LastName = SelectedUser.LastName;
                    clone.Login = SelectedUser.Login;
                    clone.Name = SelectedUser.Name;
                    clone.Notes = SelectedUser.Notes;
                    clone.Password = newuser.Password;
                    clone.UserTypeID = SelectedUser.UserTypeID;
                    clone.ActiveUser = true;
                    // clone.PermissionsID = newuser.PermissionsID;

                    clone.UserID = SelectedUser.UserID;
                   
                    if (IsEdit)
                    {

                        Users toup =useroptions.GetUserby_ID(SelectedUser.UserID);
                        //usercont.Users.Remove(toup);
                        clone.UserID = SelectedUser.UserID;
                        useroptions.ModifyUser(toup, SelectedUser);
                      //  usercont.Entry(toup).CurrentValues.SetValues(SelectedUser);
                        //usercont.Users. = clone;
                        //Users toup2 = usercont.Users.Single(u => u.Userid == clone.Userid);
                        for (int i = 0; i < usercomplist.Count; i++)
                        {
                            int usercompID = usercomplist[i].UserCompanyID;
                            UserCompanies updusercomp = useroptions.getUserComp(usercompID);//  usercont.UserCompanies.Single(u => u.UserCompanyID == usercompID);
                            useroptions.ModifyUserComp(updusercomp, usercomplist[i]);
                           // usercont.Entry(updusercomp).CurrentValues.SetValues(usercomplist[i]);
                        }

                        usercont.SaveChanges();
                    }
                    else if (IsNew)
                    {
                        useroptions.AddUser(clone);
                        //usercont.Users.Add(clone);
                        useroptions.SaveChanges();
                        //usercont.SaveChanges();
                        //int aqq = usercont.Users.ToArray().Length;
                        var updtusers = useroptions.GetUsers().ToArray();
                            int newuserid =updtusers[updtusers.Length - 1].UserID;
                        //int newuserid = usercont.Users.ToArray()[usercont.Users.ToArray().Length - 1].UserID;
                        for (int i = 0; i < usercomplist.Count; i++)
                        {
                            var newuscomp = new UserCompanies() { UserID = clone.UserID, CompaniID = usercomplist[i].CompaniID, Active = usercomplist[i].Active };
                            useroptions.AdduserCompany(newuscomp) ;
                          // usercont.UserCompanies.Add(newuscomp);
                        }
                       
                        var permissionchecked = UserAlowTree.GetAllCheckedNodes().ToArray();
                        for (int i = 0; i < permissionchecked.Length; i++)
                        {
                            Permisions permissionscheck = new Permisions() { PermissionsTypeID = int.Parse(permissionchecked[i].GetValue("PermissionsTypesID").ToString()), UserID = newuserid };
                            usercont.Permisions.Add(permissionscheck);
                            usercont.SaveChanges();
                        }

                        permissionchecked = PermissionsTree.GetAllCheckedNodes().ToArray();
                        for (int i = 0; i < permissionchecked.Length; i++)
                        {
                            Permisions permissionscheck = new Permisions() { PermissionsTypeID = int.Parse(permissionchecked[i].GetValue("PermissionsTypesID").ToString()), UserID = newuserid };
                            usercont.Permisions.Add(permissionscheck);
                            usercont.SaveChanges();
                        }
                        PermissionsTypes newpermtype = new PermissionsTypes() { IsUserID = true, PermisionValue = newuserid, PermissionTypeName = SelectedUser.Name };
                        permissionsoptions.AddPermissionType(newpermtype);
                    }

                    //var companieschecked = CompaniesList.CheckedItems;
                    // var companyList = companiesoptions.GetCompanies();
                    // var compa = companieschecked.Cast<CompaniesSet>().ToArray();

                    // for (int i = 0; i <  companyList.Length; i++)
                    // {

                    //         UserCompanies usercomp = new UserCompanies() { CompaniID = companyList[i].CompanyId, UserID = clone.UserID };
                    //     usercont.UserCompanies.Add(usercomp);

                    // //companieschecked.
                    // }




                    useroptions.SaveChanges();
                 //  usercont.SaveChanges();
                    userlist.Clear();
                    userlist.AddRange(useroptions.GetActiveUsers().ToList());
                    
                    gridView1.RefreshData();
                    UserAlowTree.RefreshDataSource();


                }
                else
                {
                    //MessageBox.Show("Passwords Incorrectos");
                }


                SetReadOnly(true);

            }
            catch (Exception ex)
            {


            }
        }
        private void simpleButton1_Click(object sender, EventArgs e)
        {
            Commit_Changes();
        }

        private void CheckButton_MouseUp(object sender, MouseEventArgs e)
        {
            CheckButton chec = sender as CheckButton;
            if (!(IsEdit||IsNew))
                chec.Toggle();
        }

        private void checkButton3_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void LogoutB_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

        }
    }
}
