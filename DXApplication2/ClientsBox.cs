using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Data.Entity;
using DataHandler;

namespace DXApplication2
{
    public partial class ClientsBox : DevExpress.XtraEditors.XtraUserControl
    {
        bool IsEdit = false;
        ClientsSet newclient = new ClientsSet();
        ClientsSet SelectedClient = new ClientsSet();
       ClientsOptions clientsoptions = new ClientsOptions();
        DataHandler.ContabilidadEntities dbContext = new DataHandler.ContabilidadEntities();
      
       ContabilidadEntities usercont = new ContabilidadEntities();
     
        List<ClientsSet> clientList = new List<ClientsSet>();





        public ClientsBox(Users Loggeduser)
        {
            InitializeComponent();
            //InitTextboxes();
            LoggedUserText.Text = string.Format("{0} {1}", Loggeduser.Name, Loggeduser.LastName);

            //newuser.Permisions = null;



            // Users clone = new Users();

            //clone.CompanyId = newuser.CompanyId;

            //clone.Email = newuser.Email;
            //clone.LastName = newuser.LastName;
            //clone.Login = newuser.Login;
            //clone.Name = newuser.Name;
            //clone.Notes = newuser.Notes;
            //clone.Password = newuser.Password;
            //clone.UserTypeID = usertypeID;
            // clone.PermissionsID = newuser.PermissionsID;

            //clone.UserID = newuser.UserID;
            // var companieschecked = CompaniesList.CheckedItems;


            clientList = clientsoptions.GetActiveClients().ToList();

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext

            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //dbContext.Users.LoadAsync().ContinueWith(loadTask =>
            //{
            //    // Bind data to control when loading complete
            //    usersBindingSource.DataSource = useroptions.GetUsers();
            //}, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            //     DataHandler.ContabilidadEntities dbContext = new DataHandler.ContabilidadEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //dbContext.CompaniesSet.LoadAsync().ContinueWith(loadTask =>
            //{
            //    // Bind data to control when loading complete
            //    companiesSetBindingSource.DataSource = companiesoptions.GetCompanies();
            //    CompaniesList.Items.AddRange(companiesoptions.GetCompanies().ToArray());
            //    //companiesSetBindingSource.DataSource = dbContext.CompaniesSet.Local.ToBindingList();
            //}, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            // DataHandler.ContabilidadEntities dbContext = new DataHandler.ContabilidadEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //    dbContext.UserCompanies.LoadAsync().ContinueWith(loadTask =>
            //    {
            //        // Bind data to control when loading complete
            //        userCompaniesBindingSource.DataSource = 
            //        //userCompaniesBindingSource.DataSource = usercont.UserCompanies.Local.ToBindingList();
            //    }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            if (clientList.Count != 0)
            {
                SetSelectedClient(clientList[0], false);
            }
            else
            {
                
                    layoutControl1.Hide();
                    layoutControl2.Hide();
                    layoutControl3.Hide();

                
            }
                gridControl1.DataSource = clientList;
            

            // This line of code is generated by Data Source Configuration Wizard

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext

            //        DataHandler.ContabilidadEntities dbContext = new DataHandler.ContabilidadEntities();
            //        // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //        dbContext.PartnersSet.LoadAsync().ContinueWith(loadTask =>
            //        {
            //// Bind data to control when loading complete
            //partnersSetBindingSource.DataSource = dbContext.PartnersSet.Local.ToBindingList();
            //        }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            DataHandler.ContabilidadEntities dbContext = new DataHandler.ContabilidadEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.ClientsSet.LoadAsync().ContinueWith(loadTask =>
            {
    // Bind data to control when loading complete
    clientsSetBindingSource.DataSource = dbContext.ClientsSet.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        private void groupControl1_Paint(object sender, PaintEventArgs e)
        {

        }


        //private void InitTextboxes()
        //{
        //    NameEdit.DataBindings.Add("EditValue", SelectedUser, "Name");
        //    LNameEdit.DataBindings.Add("EditValue", SelectedUser, "LastName");
        //    NotesEdit.DataBindings.Add("EditValue", SelectedUser, "Notes");
        //    EmailEdit.DataBindings.Add("EditValue", SelectedUser, "Email");
        //    PNickEdit.DataBindings.Add("EditValue", SelectedUser, "Login");
        //}

        //private void FillPermissions()
        //{
        //    PermissionsOptions permissiontypes = new PermissionsOptions();
           
        // PermissionsTree.DataSource = permissiontypes.GetPermissionsTypesAcces(false);
        //    UserAlowTree.DataSource = permissiontypes.GetPermissionsTypesAcces(true);
        //    PermissionsTree.KeyFieldName = "PermissionsTypesID";
        //    PermissionsTree.ParentFieldName = "IsUserID";
        //    //PermissionsTree.da
        // int aas =    PermissionsTree.Nodes.Count;
        //    //PermissionsTypes [] perlist = permissiontypes.GetPermissionsTypesAcces(true);
        //    //for (int i = 0; i < perlist.Length; i++)
        //    //{
        //    //    DevExpress.XtraTreeList.Nodes.TreeListNode dfd;
              
        //    //    PermissionsTree.AppendNode(perlist[i], PermissionsTree.Nodes[0]);
               

               

        //    //}



        //    //   PermissionsTree.Nodes[0].Nodes.Add(permissiontypes.GetPermissionsTypesAcces(false));

        //}

        private void AddNew()
        {
            IsEdit = false;
            newclient = new ClientsSet()
            {
                ExtPassportName = string.Empty,
                Email = string.Empty,
                ExtpassportExpDate = DateTime.Now,
                ExtPassportNumber = string.Empty,
                Extra1 = string.Empty,
                Extra2 = string.Empty,
                Extra3 = 0,
                Extra4 = DateTime.Now,
                HasEmail = false,
                Gender = true,
                Adress = string.Empty,
                IsActive = true,
                BirthDate = DateTime.Now,
                BirthPlace = string.Empty,
                CitizenShip = string.Empty,
                IDName = string.Empty,
                IDNumber = string.Empty,
                Notes = string.Empty,
                Phone = string.Empty,
                Serial = string.Empty,
                VisaLimit = DateTime.Now

            };
            SelectedClient = newclient;
            SetSelectedClient(newclient,true);
            layoutControl1.OptionsView.IsReadOnly = DevExpress.Utils.DefaultBoolean.False;
            layoutControl2.OptionsView.IsReadOnly = DevExpress.Utils.DefaultBoolean.False;
            layoutControl3.OptionsView.IsReadOnly = DevExpress.Utils.DefaultBoolean.False;
            layoutControl1.Show();
            layoutControl2.Show();
            layoutControl3.Show();
        }

      

        // This event is generated by Data Source Configuration Wizard
        

        // This event is generated by Data Source Configuration Wizard
        

        
   

        private ClientsSet SetSelectedClient(ClientsSet selected, bool isnew)
        {
            usercont = new ContabilidadEntities();
            //gridView1.GetDataRow(rowhandle).ItemArray

            //if(gridView1.GetFocusedRowCellValue("PartnerID")!=null)
            //{
                
                //SelectedPartner = partnersoptions.GetPartnerbyID(int.Parse(gridView1.GetFocusedRowCellValue("PartnerID").ToString()));
                //  AddUser newuser = new DXApplication2.AddUser(SelectedUser);
                //  newuser.FormClosed += Newuser_FormClosed;
                //  newuser.Show();

             NameLEdit.Text  = selected.IDName;
               PassNameEdit.Text = selected.ExtPassportName;
            PasspNumEdit.Text = selected.ExtPassportNumber.ToString();
              BirthDatEdit.DateTime = selected.BirthDate.Value;
                PasspDLDEdit.DateTime = selected.ExtpassportExpDate.Value;
                VisaLimEdit.DateTime = selected.VisaLimit.Value;
                EmailEdit.Text = selected.Email ;
               CitishipEdit.Text = selected.CitizenShip  ;
               EF1Edit.Text = selected.Extra1 ;
               EF2Edit.Text = selected.Extra2 ;
               EF3Edit.Text = selected.Extra3.ToString();
               EF4Edit.DateTime = selected.Extra4.Value ;
              IDEdit.Text = selected.ClientId.ToString();
            SerialEdit.Text = selected.Serial.ToString();
               Ismale.Checked = selected.Gender.Value  ;
               HasEmail.Checked = selected.HasEmail.Value ;
              // layout10.Text = selected.Nombramiento  ;
               NotesEdit.Text = selected.Notes ;
              
               AdressEdit.Text = selected.Adress  ;
             TelEdit.Text =  selected.Phone.ToString() ;
              
              BirthPEdit.Text = selected.BirthPlace;
        
      
            if (isnew)
            {
                VisaLimEdit.Text = string.Empty;
                BirthDatEdit.Text = string.Empty;
                EmailEdit.Text = string.Empty;
                EF3Edit.Text = string.Empty;
                EF4Edit.Text = string.Empty;
                IDEdit.Text = string.Empty;
                PasspDLDEdit.Text = string.Empty;
                TelEdit.Text = string.Empty;
               
            }

            return selected;



                //gridControl2.Refresh();
                // gridControl2.DataSource = usercomplist;



                //}
        }
        private void gridView1_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            layoutControl1.OptionsView.IsReadOnly = DevExpress.Utils.DefaultBoolean.True;
            layoutControl2.OptionsView.IsReadOnly = DevExpress.Utils.DefaultBoolean.True;
            layoutControl3.OptionsView.IsReadOnly = DevExpress.Utils.DefaultBoolean.True;
            if (gridView1.GetFocusedRowCellValue("ClientId") != null)
            {

                //SelectedPartner = partnersoptions.GetPartnerbyID(int.Parse(gridView1.GetFocusedRowCellValue("PartnerID").ToString()));
            SelectedClient=    SetSelectedClient(clientsoptions.GetClientbyID(int.Parse(gridView1.GetFocusedRowCellValue("ClientId").ToString())),false);
                //  AddUser newuser = new DXApplication2.AddUser(SelectedUser);
                //  newuser.FormClosed += Newuser_FormClosed;
                //  newuser.Show();
               
            }

        }

      

       

       
        private void EditMode()
        {
            IsEdit = true;
            //simpleButton4_Click(sender, e);
            layoutControl1.OptionsView.IsReadOnly = DevExpress.Utils.DefaultBoolean.False;
            layoutControl2.OptionsView.IsReadOnly = DevExpress.Utils.DefaultBoolean.False;
            layoutControl3.OptionsView.IsReadOnly = DevExpress.Utils.DefaultBoolean.False;

        }

        

        

       


     

        private bool Validatedata(string data )
        {

            if (String.IsNullOrWhiteSpace(data))
                return false;
            try
            {
  if ((usercont.ClientsSet.Any(item => item.IDNumber.ToString() ==IDEdit.Text) == true)) return false;
            }
            catch (Exception)
            {

            
            }
          

               
            return true;


        }
        

        private void LoginEdit_EditValueChanging(object sender, DevExpress.XtraEditors.Controls.ChangingEventArgs e)
        {
            if (Validatedata(IDEdit.Text))
            {
                NameLEdit.BackColor = Color.White;
                SelectedClient.IDNumber = IDEdit.Text;

            }
            else
            {
                NameLEdit.BackColor = Color.PeachPuff;
            }
        }

    

      

   

        private void Validate_Leave(object sender, EventArgs e)
        {
            TextEdit dfg = sender as TextEdit;
            if(IsEdit)
            dfg.BackColor = Color.White;
            if (String.IsNullOrWhiteSpace(dfg.Text)&IsEdit)
                dfg.BackColor = Color.PeachPuff;
            if(dfg.EditValue != null & !string.IsNullOrEmpty(dfg.Text))
            switch (dfg.Name)
            {
                case "NameLEdit":

                    if (Validatedata(NameLEdit.Text))
                    {
                        NameLEdit.BackColor = Color.White;
                        SelectedClient.IDName = NameLEdit.Text;

                    }
                    else
                    {
                        NameLEdit.BackColor = Color.PeachPuff;
                    }
                    break;

                case "PassNameEdit":
                    if (Validatedata(dfg.Text))
                    {
                        dfg.BackColor = Color.White;
                        SelectedClient.ExtPassportName = dfg.Text;

                    }
                    else
                    {
                        PassNameEdit.BackColor = Color.PeachPuff;
                    }

                    break;
                case "BirthDatEdit":
                    SelectedClient.BirthDate =DateTime.Parse(dfg.Text);

                    break;
                case "AdressEdit":
                    SelectedClient.Adress = dfg.Text;

                    break;
                case "PasspDLDEdit":
                    SelectedClient.ExtpassportExpDate = DateTime.Parse(dfg.Text);

                    break;
                case "VisaLimEdit":
                    SelectedClient.VisaLimit = DateTime.Parse(dfg.Text);

                    break;
                case "EmailEdit":
                    SelectedClient.Email = dfg.Text;

                    break;
                case "EF1Edit":
                    SelectedClient.Extra1 = dfg.Text;

                    break;
                case "EF2Edit":
                    SelectedClient.Extra2 = dfg.Text;

                    break;
                case "EF3Edit":
                    SelectedClient.Extra3 =decimal.Parse(dfg.Text);

                    break;
                case "EF4Edit":
                    SelectedClient.Extra4 =DateTime.Parse(dfg.Text);

                    break;
                case "CitishipEdit":
                    SelectedClient.CitizenShip = dfg.Text;

                    break;
                case "SerialEdit":
                    SelectedClient.Serial = dfg.Text;

                    break;

                    
                case "NotesEdit":
                    SelectedClient.Notes = dfg.Text;

                    break;

                case "TelEdit":
                    SelectedClient.Phone = dfg.Text;

                    break;
                case "BirthPEdit":
                    SelectedClient.BirthPlace = dfg.Text;

                    break;

                    case "PasspNumEdit":
                        SelectedClient.ExtPassportNumber=dfg.Text;

                        break;

                    case "IDEdit":
                        SelectedClient.IDNumber = dfg.Text;

                        break;


                }
            SelectedClient.IsActive = true;
        }

        private void SetInactive()
        {
            ClientsSet toup = usercont.ClientsSet.Single(u => u.ClientId == SelectedClient.ClientId);
            //usercont.Users.Remove(toup);
             SelectedClient.IsActive = false;
            usercont.Entry(toup).CurrentValues.SetValues(SelectedClient);
            usercont.SaveChanges();
            clientList.Clear();
           clientList.AddRange(clientsoptions.GetActiveClients());

            gridView1.RefreshData();
            if (clientList.Count == 0)
            {
                layoutControl1.Hide();
                layoutControl2.Hide();
                layoutControl3.Hide();

            }
            else
            {
                SetSelectedClient(clientList[clientList.Count - 1], false);
            }

        }

       

        private void gridView1_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            if (gridView1.GetFocusedRowCellValue("ClientId") != null)
            {

                //SelectedPartner = partnersoptions.GetPartnerbyID(int.Parse(gridView1.GetFocusedRowCellValue("PartnerID").ToString()));
          SelectedClient =      SetSelectedClient(clientsoptions.GetClientbyID(int.Parse(gridView1.GetFocusedRowCellValue("ClientId").ToString())),false);
                //  AddUser newuser = new DXApplication2.AddUser(SelectedUser);
                //  newuser.FormClosed += Newuser_FormClosed;
                //  newuser.Show();

            }
        }

        private void ConmitChanges()
        {
            try
            {

                //newuser.PermissionsID = permissionsoptions.GetPermisionID(newuser.Permissions.Name);
                //  newuser.UserCompanies = companiesoptions.GetCompaniesID(newuser.UserCompanies);
                // newuser.CompaniesSet = null;




                // PartnersSet clone = new PartnersSet();

                // //clone.CompanyId = newuser.CompanyId;

                // clone.Email = SelectedUser.Email;
                // clone.LastName = SelectedUser.LastName;
                // clone.Login = SelectedUser.Login;
                // clone.Name = SelectedUser.Name;
                // clone.Notes = SelectedUser.Notes;
                // clone.Password = newuser.Password;
                // clone.UserTypeID = SelectedUser.UserTypeID;
                // clone.ActiveUser = true;
                //// clone.PermissionsID = newuser.PermissionsID;

                // clone.UserID = SelectedUser.UserID;

                if (IsEdit)
                {

                    ClientsSet toup = usercont.ClientsSet.Single(u => u.ClientId == SelectedClient.ClientId);
                    //usercont.Users.Remove(toup);
                    //clone.UserID = SelectedPartner.PartnerId;
                    usercont.Entry(toup).CurrentValues.SetValues(SelectedClient);
                    //usercont.Users. = clone;
                    //Users toup2 = usercont.Users.Single(u => u.Userid == clone.Userid);


                }
                else
                {
                    
                    usercont.ClientsSet.Add(SelectedClient);
                    usercont.SaveChanges();
                    

                    //var permissionchecked =    UserAlowTree.GetAllCheckedNodes().ToArray();
                    //   for (int i = 0; i < permissionchecked.Length; i++)
                    //   {
                    //       Permisions permissionscheck = new Permisions() { PermissionsTypeID = int.Parse(permissionchecked[i].GetValue("PermissionsTypeID").ToString()), UserID = newuserid  };
                    //       usercont.Permisions.Add(permissionscheck);
                    //   }

                    //   permissionchecked =PermissionsTree.GetAllCheckedNodes().ToArray();
                    //   for (int i = 0; i < permissionchecked.Length; i++)
                    //   {
                    //       Permisions permissionscheck = new Permisions() { PermissionsTypeID = int.Parse(permissionchecked[i].GetValue("PermissionsTypeID").ToString()), UserID = newuserid };
                    //       usercont.Permisions.Add(permissionscheck);
                    //   }

                }

                //var companieschecked = CompaniesList.CheckedItems;
                // var companyList = companiesoptions.GetCompanies();
                // var compa = companieschecked.Cast<CompaniesSet>().ToArray();

                // for (int i = 0; i <  companyList.Length; i++)
                // {

                //         UserCompanies usercomp = new UserCompanies() { CompaniID = companyList[i].CompanyId, UserID = clone.UserID };
                //     usercont.UserCompanies.Add(usercomp);

                // //companieschecked.
                // }





                usercont.SaveChanges();
                clientList.Clear();

                clientList.AddRange(clientsoptions.GetActiveClients());

                gridView1.RefreshData();
                layoutControl1.OptionsView.IsReadOnly  = DevExpress.Utils.DefaultBoolean.True;
                layoutControl2.OptionsView.IsReadOnly = DevExpress.Utils.DefaultBoolean.True;
                layoutControl3.OptionsView.IsReadOnly = DevExpress.Utils.DefaultBoolean.True;







            }
            catch (Exception ex)
            {


            }
        }

        private void IsProvChB_CheckedChanged(object sender, EventArgs e)
        {
            SelectedClient.HasEmail = HasEmail.Checked;
        }

        private void IsCredChB_CheckedChanged(object sender, EventArgs e)
        {
            SelectedClient.Gender = Ismale.Checked;
        }

        private void simpleButton1_Click_1(object sender, EventArgs e)
        {
            ConmitChanges();
        }

        private void simpleButton5_Click(object sender, EventArgs e)
        {
            EditMode();
        }

        private void simpleButton6_Click(object sender, EventArgs e)
        {
            SetInactive();
        }

        private void simpleButton4_Click(object sender, EventArgs e)
        {
            AddNew();
        }
    }
}
